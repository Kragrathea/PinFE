extends layout


block content
  //h1= Pinball
  //p Welcome to #{title}
    
  //.stars
  //.twinkling
  //.clouds

  

  div.swiper-container(id='table-list' style='')
  
    div.message(id='message')
    div.todo.final(id='final_span')
    span.todo.interm(id='interm_span')

    <i class="fas fa-spinner fa-spin fa-5x " style='position:absolute;top:50%;left:50%;z-index:11;color:white;display:none'></i>




    //-webkit-box-reflect: below -100px -webkit-gradient(linear, left top, left bottom, from(transparent), color-stop(50%, transparent), to(rgba(255,255,255,0.2)));')
    h5.status(style='color:green;position:absolute;top:15px;right:15px;z-index:11')

    div(style:'z-index:10;float:left')
      //input.search(type="text")
      //ul.pagination
      div(style='text-align:center;')
        h5.filter(style='display:inline-block;height:25px;margin:0px')
        h5.ratio(style='display:block;margin:0px')="1/"+tables.length
    ul.swiper-wrapper.list
    div.gridview-wrapper
  div(style='text-align:center;')
    h5.masterName(style='display:inline-block;height:25px;width:100%;margin:0px')
    h5.tableName(style='display:inline-block;height:25px;margin:0px')

    // Modal
    #tableEditModal.modal.fade(tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true")
        .modal-dialog(role="document" style='max-width:60%')
            .modal-content



    //div.swiper-pagination
  script.

    var tables = !{JSON.stringify(tables)}
    var filteredTables=tables;

    var filterString="";

    $(".search").on("input",function(){
        setFilter($(".search").val());
    });
    

    var recognition = new webkitSpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = true;
    recognizing=false;

    recognition.onstart = function () {
        recognizing = true;
        console.log("start");
        $(".pulse-ring").show();
        //message.innerHTML = 'Speak now.';
        //talk_button.innerHTML = 'Listen';
    };

    recognition.onresult = function (event) {
        var interim_transcript = '';
        for (var i = event.resultIndex; i < event.results.length; ++i) {
            if (event.results[i].isFinal) {
                final_transcript += event.results[i][0].transcript;
            } else {
                interim_transcript += event.results[i][0].transcript;
            }
        }

        if(final_transcript!=""){
          console.log(final_transcript)
          //if(final_transcript.indexOf("search")>-1)
          {
            //var term = final_transcript.split("search")[1];
            var term = final_transcript;

            curFilter=term.trim();
            setFilter(curFilter);
            recognition.stop();
          }
          final_transcript="";
          interim_transcript="";
         }
        //console.log(interim_transcript)
        //final_span.innerHTML = final_transcript;
        //interim_span.innerHTML = interim_transcript;
    };

    recognition.onend = function () {

        console.log("onend");
        $(".pulse-ring").hide();

        recognizing = false;
        if (ignore_onend) {
            return;
        }
        //speechMyText(final_transcript);
        if (!final_transcript) {
            //message.innerHTML = 'Click "Talk" and begin speaking.';
            //talk_button.innerHTML = 'Talk';
            return;
        }
    };

    recognition.onerror = function (event) {
      console.log("Recognize error:"+even.error);
        if (event.error == 'no-speech') {
            //message.innerHTML = 'No speech was detected.';
            ignore_onend = true;
        }
        if (event.error == 'audio-capture') {
            //message.innerHTML = 'No microphone was found. Ensure that a microphone is installed.';
            ignore_onend = true;
        }
        if (event.error == 'not-allowed') {
            if (event.timeStamp - start_timestamp < 100) {
                //message.innerHTML = 'Permission to use microphone is blocked. To change, go to chrome://settings/contentExceptions#media-stream';
            } else {
                //message.innerHTML = 'Permission to use microphone was denied.';
            }
            ignore_onend = true;
        }
    };

    function talkWithApp(event) {
      if (recognizing) {
          recognition.stop();
          //message.innerHTML = 'Click "Talk" and begin speaking.';
          //talk_button.innerHTML = 'Talk';
          return;
      }
      final_transcript = '';
      //recognition.lang = language.value;
      recognition.start();
      ignore_onend = false;
    }

    function speechMyText(textToSpeech) {
      var u = new SpeechSynthesisUtterance();
      u.text = textToSpeech;
      u.lang = language.value;
      u.rate = 1.0;
      u.onend = function (event) {}
      speechSynthesis.speak(u);
    }

    function setFilter(filter){
        
        console.log("Search:"+filter);

        if(filter=="")
            filteredTables = tables;
        else
        {
            filterString=filter.toLowerCase();

            console.log("Searching:"+filterString);
            //filteredTables = tables.filter(x=>x.tableName.toLowerCase().indexOf(filterString)>-1);
            filteredTables = tables.filter(x=>x.table.toLowerCase().indexOf(filterString)>-1);

        }
        console.log("Found:"+filteredTables.length);
        //initTableList();

        //fill array with seq numbers. neat. 
         swiper.virtual.removeAllSlides()
        swiper.virtual.slides = Array.from(Array(filteredTables.length).keys());
        swiper.virtual.update();

        swiper.update();
        swiper.slideTo(0);
        updateRatio();

        window.history.pushState({
            id: 'homepage'
        }, 'Home | My App', '/?q='+filter);

    };

    function createTableItem(index){
        var e = filteredTables[index];
        var item=$("<div class='item-container'></div>");
        item.attr("data-table",encodeURIComponent(e.table));
        
        //item.attr("style",'');

        if(e.bgSmallPic){
            var img=$("<img/>");
            img.attr("src","tables/?image="+ encodeURIComponent(e.table)+".bg-small.jpg");
            img.attr("style",'width:100%')
            item.append(img);
        }

        var showDesktop=false;
        if(window.location.href.toLowerCase().indexOf("view=dt") > -1)
            showDesktop=true;

        if(e.dtSmallPic && showDesktop){
            var img=$("<img/>");
            img.attr("src","tables/?image="+encodeURIComponent(e.table)+".dt-small.jpg");
            img.attr("style",'width:100%;')
            item.append(img);
        }
        
        if(e.fsSmallPic && !showDesktop){
            var img=$("<img/>");
            img.attr("src","tables/?image="+encodeURIComponent(e.table)+".fs-small.jpg");
            img.attr("style",'width:70%;position:absolute;top:60%;left:15%;max-height:400px;transform:rotateX(45deg);')
            item.append(img);
        }
              
         if(true ){
            var div =$("<div class='wheel' style='transform:rotateX(0deg)'></div>");
            
            if(!e.wheelPic)
            {
                //img.attr("src","images/"+"3D Search.png");
                let ntext =$("<h2></h2>");
                //ntext.attr("name",e.tableName);
                ntext.append(e.tableName);
                div.append(ntext);
            }else
            {
              var img=$("<img/>");
              img.attr("src","tables/?image="+encodeURIComponent(e.table)+".wheel.png");

              img.attr("style",'')
              //max-height:120px;max-width:90%;
              div.append(img)
            }
            item.append(div);
        }
        
        var text =$("<h2></h2>");
        text.attr("name",e.tableName);
        
        //if(!e.wheelPic)
        //    text.append( e.table );

        item.append(text);

        var icontainer=$("<li class='swiper-slide'></li>");
        icontainer.attr("data-index",index);
        icontainer.append(item);


        return(icontainer);
    }
    function createGridTableItem(index){
        var e = filteredTables[index];
        var item=$("<div class='item-container' style='width:256px;height:auto;max-height:25%;float:left;filter: drop-shadow(22px 22px 22px rgba(0,0,0,1.0));'></div>");
        item.attr("data-table",encodeURIComponent(e.table));

        //- var showDesktop=false;
        //- if(window.location.href.toLowerCase().indexOf("view=dt") > -1)
        //-     showDesktop=true;

        //- if(e.dtSmallPic){
        //-     var img=$("<img/>");
        //-     img.attr("src","tables/?image="+encodeURIComponent(e.table)+".dt-small.jpg");
        //-     img.attr("style",'display:block;width:100%;height:auto;')
        //-     item.append(img);
        //- }
        
        
        //- if(e.fsSmallPic){
        //-     var img=$("<img/>");
        //-     img.attr("src","tables/?image="+encodeURIComponent(e.table)+".fs-small.jpg");
        //-     img.attr("style",'display:block;width:100%;height:auto;')
        //-     item.append(img);
        //- }

        //- if(e.bgSmallPic && false){
        //-     var img=$("<img/>");
        //-     img.attr("src","tables/?image="+ encodeURIComponent(e.table)+".bg-small.jpg");
        //-     img.attr("style",'display:block;width:100%;height:auto;')
        //-     item.append(img);
        //- }

         if(true ){
            var div =$("<div class='wheel' style='transform:rotateX(0deg)'></div>");
            
            if(!e.wheelPic)
            {
                //img.attr("src","images/"+"3D Search.png");
                let ntext =$("<h5></h5>");
                //ntext.attr("name",e.tableName);
                ntext.append(e.tableName);
                div.append(ntext);
            }else
            {
              var img=$("<img/>");
              img.attr("src","tables/?image="+encodeURIComponent(e.table)+".wheel.png");

              img.attr("style",'display:block;width:100%;height:auto;')
              //max-height:120px;max-width:90%;
              div.append(img)
            }
            item.append(div);
        }
        
        var text =$("<h2></h2>");
        text.attr("name",e.tableName);

        item.append(text);

        return(item);

    }
    function initTableList()
    {
        //$(".list").empty();
        filteredTables.forEach(function(e,i){
            var item = createGridTableItem(i);
            //swiper.virtual.appendSlide(item.html());
            $(".gridview-wrapper").append(item);
        });
    }

          

    //swiper.on("reachBeginning",updateSlides);
    //swiper.on("reachEnd",updateSlides);
        

    var curFilter=""
    var buildingFilter=false;
    document.onkeydown = checkKey;
    function checkKey(e) {
        e = e || window.event;
        //console.log(e.keyCode);      
        if (e.ctrlKey)
            return;

        switch(e.keyCode)
        {
            case 38:
                // up arrow
                break;
            case 40:
                // down arrow
                break;
            case 37:
                // left arrow
                buildingFilter=false;
                swiper.slidePrev();
                break;
            case 39:
                // right arrow
                buildingFilter=false;
                swiper.slideNext();
                break;
            case 13:
                var curIndex = parseInt(swiper.virtual.slides[swiper.activeIndex]);
                var table = filteredTables[curIndex].table;
                var playUrl = '/play?view=fs';
                if(e.shiftKey || (window.location.href.toLowerCase().indexOf("view=dt") > -1))
                    playUrl='/play?view=dt';

                $.ajax({
                    url: playUrl, 
                    type: 'POST', 
                    contentType: 'application/json', 
                    data: JSON.stringify({table:table})}
                )
                break;
            case 8:
                curFilter=curFilter.slice(0, -1);
                setFilter(curFilter);
                break;
            default:
                if (e.key.length==1 /*&& e.key.match(/^[0-9a-z]+$/)*/)
                {
                    if(!buildingFilter){
                        curFilter=""
                        buildingFilter=true;
                        }
                    curFilter=curFilter+e.key;
                    setFilter(curFilter);
                    //console.log(curFilter);
                }
                break;
        }
        $(".filter").text(curFilter);
    }

    



      if (!!window.EventSource) {
        var source = new EventSource('/status')

        source.addEventListener('message', function(e) {
            var status= JSON.parse(e.data);
            if($(".status").val()!=status.state){
                $(".status").text(status.state);

                //loading spinner
                if(status.state.startsWith("Playing"))
                    $(".fa-spinner").show();
                else
                    $(".fa-spinner").hide();
                
            }

        }, false)

        source.addEventListener('open', function(e) {
            //console.log("Connected:"+e.data);
            $(".status").text("Connected");
        }, false)

        source.addEventListener('error', function(e) {
          const id_state = document.getElementById('state')
          if (e.eventPhase == EventSource.CLOSED)
            source.close()
          if (e.target.readyState == EventSource.CLOSED) {
            //console.log("Disconnected:");
            $(".status").text("Connected");
            //id_state.innerHTML = "Disconnected"
          }
          else if (e.target.readyState == EventSource.CONNECTING) {
            //console.log("Connecting...:");
            $(".status").text("Connecting...");
            //id_state.innerHTML = "Connecting..."
          }
        }, false)
      } else {
        console.log("Your browser doesn't support SSE")
      }

    var swiper;

    $(function() {
                //- var showDesktop=false;
        if(window.location.href.toLowerCase().indexOf("view=grid") > -1)
        {
            initTableList();    
        }else{

            function makeSlides()
            {
                var slides = [];
                for (var i = 0; i < filteredTables.length; i += 1) {
                    slides.push(i);
                }
                return slides;
            }
            var vslides =makeSlides();
            //console.log(vslides);

            swiper = new Swiper('.swiper-container', {
            //effect: 'coverflow',
            slidesPerView: 5,
            centeredSlides: true,
            spaceBetween: 60,
            mousewheel: true,
            //mousewheelForceToAxis: true,
            virtual: {
                addSlidesBefore:5,
                addSlidesAfter:5,
                renderSlide:	function(slide, index){
                    //console.log([slide,index]);
                    //return $('<div class="swiper-slide">Slide</div>'); 
                    return createTableItem(slide);
                },

                slides:vslides,
            
            },
            //lazy: {
            //  loadPrevNext: true,
            //	loadPrevNextAmount: 5,
            //},
            //keyboard: {
            //  enabled: true,
            //},
            coverflowEffect: {
                rotate: 20,
                stretch: 10,
                depth: 100,
                modifier: 1,
                slideShadows : false,
            },
            });
        }

        setupContext();

        updateRatio();
        var clickSoundIndex=0;
        var tockSoundsIndex=0;
        var clickSounds =[new Audio('/sounds/button16.wav'),new Audio('/sounds/button16.wav'),new Audio('/sounds/button16.wav'),new Audio('/sounds/button16.wav'),new Audio('/sounds/button16.wav'),new Audio('/sounds/button16.wav'),];
        var tockSounds =[new Audio('/sounds/button22.wav'),new Audio('/sounds/button22.wav'),new Audio('/sounds/button22.wav'),new Audio('/sounds/button22.wav'),new Audio('/sounds/button22.wav'),new Audio('/sounds/button22.wav'),];

        function playClick()
        {
            clickSounds[(clickSoundIndex++)%clickSounds.length].play()
        }
        function playTock()
        {
            tockSounds[(tockSoundsIndex++)%tockSounds.length].play()
        }
        //swiper.on("slideChangeTransitionEnd",playTock);
        swiper.on("slideChange",function(){
            updateRatio();
            playTock();
            //console.log("slideChange:"+swiper.activeIndex);

            var curIndex = parseInt(swiper.virtual.slides[swiper.activeIndex]);
            if(curIndex!=undefined && !isNaN(curIndex))
            {
                $(".tableName").text(filteredTables[curIndex].table);

                //var matches = findTableInMaster(filteredTables[dataIndex])
                //$(".masterName").text(matches[0].name);

                $.ajax({
                    url: '/select', 
                    type: 'POST', 
                    contentType: 'application/json', 
                    data: JSON.stringify({table:filteredTables[curIndex].table})
                    });
            }
                
        });
            
    });

    function updateRatio()
    {
        var curIndex = parseInt(swiper.virtual.slides[swiper.activeIndex]);
        if(curIndex!=undefined && !isNaN(curIndex))
            $(".ratio").text((curIndex+1) +"/" + filteredTables.length);
        else
            $(".ratio").text(0 +"/" + filteredTables.length);
    }

    function setupContext()
    {
      $.contextMenu({
          //selector: "div[tabulator-field='backglass']", 
          selector: "div.item-container", 
          build: function($trigger, e) {
              // this callback is executed every time the menu is to be shown
              // its results are destroyed every time the menu is hidden
              // e is the original contextmenu event, containing e.pageX and e.pageY (amongst other data)
              console.log([$trigger,e])
                let tableFile = $($trigger).attr("data-table");

                //just search for the file part.
                let searchText = decodeURIComponent(tableFile).split('\\').slice(-1)[0];
              return {
                  callback: function(key, options, rootMenu, originalEvent) {

                    console.log("clicked: "); 
                    console.log([key, options, rootMenu, originalEvent]);  
                    console.log([options.$trigger.parent().attr("data-table")])


                    if(key=="edit")
                    {
                        $('#tableEditModal .modal-content').load("/table?name="+tableFile, function() {
                            
                            //$('#tableEditModal.modal-title').text("Edit "+decodeURIComponent(tableFile))
                            $('#tableEditModal').modal();
                        });


                        //document.location="/table?name="+tableFile
                    }
                    if(key=="searchWheel")
                    {
                        window.open('https://www.google.com/search?q='+searchText+" wheel",'_blank');
                        //document.location="/table?name="+tableFile

                    }
                    if(key=="searchBG")
                    {
                        window.open('https://www.google.com/search?q='+searchText+" backglass",'_blank');
                        //document.location="/table?name="+tableFile

                    }
                    if(key=="search")
                    {
                        window.open('https://www.google.com/search?q='+searchText,'_blank');
                        //document.location="/table?name="+tableFile

                    }                                           
                    if(key=="play")
                    {
                        /*var playUrl = '/capture?view=fs'
                        $.ajax({
                            url: playUrl, 
                            type: 'POST', 
                            contentType: 'application/json', 
                            data: JSON.stringify({table:tableFile})
                        });*/
                        var playUrl = '/play?view=fs';
                        if(e.shiftKey || (window.location.href.toLowerCase().indexOf("view=dt") > -1))
                            playUrl='/play?view=dt';

                        $.ajax({
                            url: playUrl, 
                            type: 'POST', 
                            contentType: 'application/json', 
                            data: JSON.stringify({table:decodeURIComponent(tableFile)})}
                        )

                    }
 
                      
                  },
                  items: {
                      "edit": {name: "Edit", icon: "edit"},
                      "play": {name: "Play", icon: "play"},
                      "folder": {name: "Open Folder", icon: "folder"},
                    //-   "searchWheel": {name: "Search for Wheel", icon: "search"},
                    //-   "searchBG": {name: "Search for Backglass", icon: "search"},
                    //-   "search": {name: "Search for:"+decodeURIComponent(tableFile), icon: "search"},
                      //"cut": {name: "Cut", icon: "cut"},
                      //"copy": {name: "Copy", icon: "copy"},
                      //"paste": {name: "Paste", icon: "paste"},
                      //"delete": {name: "Delete", icon: "delete"},
                      //"sep1": "---------",
                      //"quit": {name: "Quit", icon: function($element, key, item){ return 'context-menu-icon context-menu-icon-quit'; }}
                  }
              };
          }
      });

    }


    //$("body").addClass("rot")